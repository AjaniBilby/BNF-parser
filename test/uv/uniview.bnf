program ::= %w* ( stmt_top %w* )* ;
	stmt_top ::=
		function |
		impl |
		struct |
		trait |
		library |
		external |
		include ;

#=============================
#  Helper patterns
#=============================
	w ::= " " | "\t" | nl | comment ;
	nl ::= "\r\n" | "\n" ;

	digit ::= "0" -> "9" ;
		digit_nz ::= "1" -> "9" ;
	letter ::= "a" -> "z" | "A" -> "Z" ;


#=============================
#  Comments
#=============================
	comment ::= comment_single | comment_multi ;
		comment_single ::= "//" !( nl )* nl ;
		comment_multi  ::= "/*" ( "\\*" | !( "*/" )+ )* "*/" ;


#=============================
#  Constants
#=============================
	constant ::= boolean |
		void |
		string |
		hexadecimal | octal | binary |
		float | integer ;

	string ::= string_unicode | string_text ;
		string_unicode   ::= %"\"" ( ( "\\" !"" ) | !( "\"" ) )* %"\"" ;
		string_text      ::= %"\'" ( ( "\\" !"" ) | !( "\'" ) )* %"\'" ;

	hexadecimal ::= "0x" ...hex_char+ ;
		hex_char ::= digit | "a" -> "f" | "A" -> "F" ;

	octal ::= "0o" ...octal_char+ ;
		octal_char ::= "0" -> "3" ;

	binary ::= "0b" ( "0" | "1" )+ ;

	boolean ::= "true" | "false" ;

	void ::= "void" ;

	integer ::= "-"? ...integer_u ;
		integer_u ::= ( digit_nz digit* ) | zero ;
		zero ::= "0" ;
	float   ::= ...integer "." ...integer_u ( "e" ...integer )? ;


#=============================
#  Accessors
#=============================
access ::= ...name %w* ( access_static | access_dynamic | access_template )* ;

access_static  ::= %("." ) ...name %w* ;

access_dynamic ::= %("[" w* ) call_args %( w* "]" ) %w* ;

access_template ::= %( "#[" w* ) template_args %( w* "]" ) %w* ;
	access_template_args ::= template_arg %w* ( %( "," w* ) template_arg %w* )* %","? ;
	access_template_arg  ::= constant | data_type ;


#=============================
#  Variables
#=============================
	name ::= ( letter | "_" )* ( letter | digit | "_" )* ;
	variable ::= ...name %w* ( access_static | access_dynamic )* ;

	data_type ::= ...("@" | "$")? ...name %w* ( access_static | access_template )* ;
		data_type_access ::= %"." ...name ;

	declare ::= %( "let" %w+ ) ...name %w* ( %( ":" w* ) data_type %w* )? ( %( "=" w* ) expr )? %( w* ";" ) ;
	assign  ::= variable %( w* "=" w* ) expr %( w* ";" ) ;


#=============================
#  Function
#=============================
	function ::= func_head %w* ( function_body | ";" ) ;
		func_head ::= %( "fn" w+ ) ...name %( w* "(" w* ) func_arguments %( w* ")" w* ) %w* ( %( ":" w* ) data_type )? ;
			func_arguments ::=  ( func_arg %w* ( %( "," w* ) func_arg %w* )* )? ;
				func_arg ::= ...name %( w* ":" w* ) data_type ;

		function_body ::= %( "{" w* ) ( func_stmt %w* )* %( "}" w* ";"? ) ;
			func_stmt ::= if | when | return | declare | assign | call_procedure ;

	function_outline ::= func_head %( w* ";" ) ;
	function_redirect ::= %( "fn" w+ ) string %( w* "(" w* ) func_arguments %( w* ")" w* ) ( %( w* ":" w* ) data_type )? %( w+ "as" w+ ) ...name %( w* ";" ) ;

	call ::= access call_body ;
		call_body ::= %( w* "(" w* ) call_args? %( w* ")" ) ;
		call_args ::= expr %w* ( %( "," w* ) expr %w* )* %( ","? w* ) ;
	call_procedure ::= call %";" ;

	return ::= %"return" ( %w+ expr )? %( w* ";" ) ;


#=============================
#  Structure
#=============================
	struct  ::= %( "struct" w+ ) ...name %( w* "{" w* ) struct_body %( w* "}" ) ;
		struct_body ::= ( %w* struct_stmt %w* )* ;
		struct_stmt ::= struct_attribute | struct_attribute ;
			struct_attribute ::= ...name %( w* ":" w* ) data_type %( w* ";" ) ;

	impl ::= %( "impl" w+ ) data_type impl_for? %( w* "{" w* ) impl_body %( w* "}" );
		impl_for ::= %( w+ "for" w+ ) data_type ;
		impl_body ::= ( %w* impl_stmt )* ;
			impl_stmt ::= function | function ;

	trait ::= %( "trait" w+ ) ...name %w* trait_reliance? %( w* "{" w* ) trait_body %( w* "}" ) ;
		trait_reliance ::= %( ":" w* ) data_type ( %( w* "," w* ) data_type )* ;
		trait_body ::= ( %w* trait_stmt )* ;
			trait_stmt ::= function | function ;

	expr_struct ::= data_type expr_struct_body ;
		expr_struct_body ::= %( w* "{" w* ) expr_struct_args? %( w* "}" ) ;
		expr_struct_args ::= expr_struct_arg %w* ( %( "," w* ) expr_struct_arg )* %( w* ","? ) ;
			expr_struct_arg ::= ...name %( w* ":" w* ) expr ;


#=============================
#  Template
#=============================
	template ::= %( %"template" w* "(" w* ) template_args %( w* ")" ) ;
		template_args ::= struct_attribute %w* ( %( "," w* ) struct_attribute %w* )* ;


#=============================
#  Expression
#=============================
	expr ::= expr_arg %w* ( ...expr_middle_oper %w* expr_arg %w* )* ;
		expr_left_oper ::= "!" | "$" | "@" | "-" ;
		expr_middle_oper ::= "," | "?" | ":" | "&&" | "||" | "==" | "!=" | "<=" | ">=" | "<" | ">" | "%" | "*" | "/" | "+" | "-" | "->" ;
		expr_arg ::= expr_left_oper? %w* ( constant | expr_brackets | expr_val ) ;
			expr_val ::= access ( expr_struct_body | call_body )? ;
		expr_brackets ::= %( "(" w* ) expr %( w* ")" ) ;


#=============================
#  Library Management
#=============================
	library ::= import | import ;
	import ::= %( "import" w* ) string %w* ( %( "as" w+ ) ...name )? %( w* ";" ) ;


#=============================
#  External
#=============================
	include ::= %( "include" w+ ) ...include_type %w* string %( w* ";" ) ;
		include_type ::= "llvm" | "cpp" | "c" ;

	external ::= %( "external" w+ ) ...external_mode %( w* "{" w* ) external_body %( w* "}" ";"? ) ;
		external_mode ::= "assume" | "export" ;
		external_body ::= ( external_term w* )* ;
		external_term ::= function_redirect | function_outline | type_def | struct ;

	type_def ::= %( "type" w+ ) ...name %( w+ "size" w+ ) integer %( w* ";" ) ;


#=============================
#  If statement
#=============================
	if ::= if_stmt %w* ( elif_stmt %w* )* else_stmt? ;
		if_stmt   ::= %( "if"   w* "(" w* ) expr %( w* ")" w* ) function_body ;
		elif_stmt ::= %( "elif" w* "(" w* ) expr %( w* ")" w* ) function_body ;
		else_stmt ::= %( "else" w* ) function_body ;


#=============================
#  When statement
#=============================
	when ::= %( "when" w+ ) variable %( w* "{" %w* ) when_opt+ %"}" ;
		when_opt ::= ( "default" | data_type ) %w* function_body %w* ;