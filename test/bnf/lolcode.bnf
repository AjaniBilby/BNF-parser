program ::= %"HAI" %w code_block %ws* %"KTHXBYE" ;


comment ::= %(comment_single | comment_multi) ;
	comment_single ::= "BTW" !"\n"* ;
	comment_multi  ::= "OBTW" !"TLDR"* "TLDR" ;
w ::= ws* nlc ws* ;       # Multi-line white space
	ws ::= " " | "\t" ;     # Single line white space
	nlc ::= "\r\n" | "\n" | "," ;

code_block ::= statement %w ( statement %w )* ;
statement  ::= declaration | if_block | loop | func_def | comment |
	print_block | input_block | assignment | func ;


declaration ::= %"I HAZ A" %ws+ ...label ( %ws+ %"ITZ" %ws+ expression )? ;
assignment  ::= ...label %ws+ %"R" %ws+ expression ;


loop ::= %"IM IN YR" %ws+ ...label %ws+ %"WILE" %ws+ expression %w code_block %"IM OUTTA YR" %ws+ ...label ;

if_block ::= %"O RLY?" %ws expression %w %"YA RLY" %w code_block else_if_block? %"OIC" ;
	else_if_block ::= ( else_bounded | else_unbounded ) %w code_block ;
		else_bounded   ::= %"MEBEE" %ws+ expression ;
		else_unbounded ::= %"NO WAI" ;


func_def ::= %"HOW DUZ I" %ws+ ...label func_args? %w code_block %w %"IF U SAY SO" ;
	func_args ::= func_arg ( %"AN" %ws+ func_arg )* ;
	func_arg  ::= %"YR" %ws+ ...label ;


print_block ::= %"VISIBLE" ( %ws+ expression )+ ;
input_block ::= %"GIMMEH"  %ws+ ...label ;



expression ::=
		equals | not_equals | both | either | greater | less | # comparitors
		add | sub | mul | div | mod | cast |                   # dual operand
		all | any | not |                                      # group boolean operand
		func | atom | label ;                                  # operands
	equals     ::= %( "BOTH SAEM" ws+ )   expression %( ws+ "AN" ws+ ) expression ;
	not_equals ::= %( "DIFFRINT" ws+ )    expression %( ws+ "AN" ws+ ) expression ;
	both       ::= %( "BOTH OF" ws+ )     expression %( ws+ "AN" ws+ ) expression ;
	either     ::= %( "EITHER OF" ws+ )   expression %( ws+ "AN" ws+ ) expression ;
	greater    ::= %( "BIGGR OF" ws+ )    expression %( ws+ "AN" ws+ ) expression ;
	less       ::= %( "SMALLR OF" ws+ )   expression %( ws+ "AN" ws+ ) expression ;
	add        ::= %( "SUM OF" ws+ )      expression %( ws+ "AN" ws+ ) expression ;
	sub        ::= %( "DIFF OF" ws+ )     expression %( ws+ "AN" ws+ ) expression ;
	mul        ::= %( "PRODUKT OF" ws+ )  expression %( ws+ "AN" ws+ ) expression ;
	div        ::= %( "QUOSHUNT OF" ws+ ) expression %( ws+ "AN" ws+ ) expression ;
	mod        ::= %( "MOD OF" ws+ )      expression %( ws+ "AN" ws+ ) expression ;
	cast       ::= %( "MAEK" ws+ )        expression %( ws+ "A"  ws+ ) expression ;
	all        ::= %("ALL OF" ws+ ) expression ( %( ws+ "AN" ws+ ) expression )* ;
	any        ::= %("ANY OF" ws+ ) expression ( %( ws+ "AN" ws+ ) expression )* ;
	not        ::= %("NOT" ws+ ) expression ;
	func  ::= "DO" ...label %ws+ ( expression %ws+ )+ %"MKAY?" ;
	label ::= ...( letters ( letters | digits )* ) ;
		letters  ::= "A"->"Z"+ | "a"->"z"+ ;
		digit_nz ::= "1"->"9"+ ;
		digits   ::= "0"->"9"+ ;
	atom ::= "WIN" | "FAIL" | "NOOB" | float | integer | string ;
		float   ::= digits+ "." digits+ ;
		integer ::= ...( "0" | ( digit_nz digits* ) ) ;
		string  ::= %"\"" !"\""* %"\"";